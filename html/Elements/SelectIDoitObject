<div id="i-doit-objectbrowser" style="position: relative; min-width: 400px;">
    <div id="data-store" style="display:none;"></div>
	<div id="i-doit-mandator-notice">Bitte wählen Sie einen Mandanten aus.</div>
    <div id="i-doit-objectbrowser-content" style="display:none;">
        <ul>
            <li><a href="#tab-objectview">Objektansicht</a></li>
            <li><a href="#tab-treeview">Baumansicht</a></li>
            <li><a href="#tab-itemview">Gewählte Objekte</a></li>
        </ul>

        <a href="<% RT->Config->Get('IDoitURL') %>" title="Go to i-doit">
			<img src="<% RT->Config->Get('WebPath') %>/NoAuth/images/i-doit.png" alt="i-doit" style="position: absolute; top: 3px; right: 8px; height: 28px;" />
		</a>

        <img id="loading-screen" src="<% RT->Config->Get('WebPath') %>/NoAuth/images/ajaxload.gif" alt="Loading" height="32" width="32" style="position:absolute; opacity:0; z-index:100;" />

        <div id="tab-objectview">
            Objekt Typ <select class="object-type"></select><br />
            <table class="object-table" style="width:100%;">
                <thead>
                    <tr>
                        <th width="20%">ID</th>
                        <th width="80%">Name</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
        <div id="tab-treeview">
            <div class="workplaces"></div>
            <a href="#" id="requestor-reload">Neu laden</a>
        </div>
        <div id="tab-itemview">
            Ausgewählte Objekte
            <table class="object-table" style="width:100%;">
                <thead>
                    <tr>
                        <th width="10%"></th>
                        <th width="10%">ID</th>
                        <th width="40%">Name</th>
                        <th width="30%">Typ</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script type="text/javascript">
// Global variables (without "var").
api_url = '<% $IDoitAPI %>';
api_lang = '<% $IDoitLanguage %>';
api_user = '<% $IDoitUser %>';
api_password = '<% $IDoitPassword %>';
api_mandator = 0;
api_default_view = '<% $IDoitView %>';

browser_preselection_field = null;
browser_mandator_field = null;

current_objectview_data = {};
current_treeview_data = {};

datatable_lang = {
    "sProcessing":   "Bitte warten...",
    "sLengthMenu":   "_MENU_ Einträge anzeigen",
    "sZeroRecords":  "Keine Einträge vorhanden.",
    "sInfo":         "_START_ bis _END_ von _TOTAL_ Einträgen",
    "sInfoEmpty":    "0 bis 0 von 0 Einträgen",
    "sInfoFiltered": "(gefiltert von _MAX_ Einträgen)",
    "sInfoPostFix":  "",
    "sSearch":       "Suchen",
    "sUrl":          "",
    "oPaginate": {
        "sFirst":    "&laquo;",
        "sPrevious": "&lsaquo;",
        "sNext":     "&rsaquo;",
        "sLast":     "&raquo;"
    }
};

(function($) {
    browser_preselection_field = $('textarea[name="<% $IDoitObjects %>"]');
	browser_mandator_field = $('select[name="<% $IDoitMandator %>"]');
	
    // Initialize the data table.
    var objectview_table = $('#i-doit-objectbrowser #tab-objectview table.object-table').dataTable({
        "bJQueryUI": true, 
        "bAutoWidth": false,
        "bLengthChange": false,
        "iDisplayLength": 20,
        "sPaginationType": "full_numbers",
        "oLanguage": datatable_lang
    }),
    itemview_table = $('#i-doit-objectbrowser #tab-itemview table.object-table').dataTable({
        "bJQueryUI": true, 
        "bAutoWidth": false,
        "bPaginate": false,
        "bLengthChange": false,
        "bSort": false,
        "oLanguage": datatable_lang
    });

    /**
     * This event will initialize the browser.
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    window.init_browser = function() {
		api_mandator = browser_mandator_field.val();
		if (api_mandator == 0 || api_mandator == "") {
			return
		}
	
		browser_mandator_field.slideUp(500);
		$('#i-doit-objectbrowser-content').animate({height: '600px'}, 500);

		// Here we get our preselection data and cast the ID's to integer.
		var data = {};

		// We look if the preselection field is filled.
		window.load_preselection_data();

		// Here we load the requestor data (workplaces and assigned objects).
		window.load_requestor_data();

		data = {
			"method":"cmdb.object_types",
			"params":{
				"session":{
					"username":api_user,
					"password":api_password,
					"language":api_lang,
					"mandator":api_mandator}},
			"id":"1",
			"jsonrpc":"2.0"};

		idoit_ajax(data, function(response) {
			if (response.error == null) {
				$('#i-doit-objectbrowser select.object-type').html('');
				$.each(response.result, function(i, e) {
					$('<option value="' + e.id + '">' + e.title + '</option>').appendTo('#i-doit-objectbrowser select.object-type');
				});

				// Trigger the event.
				$('#i-doit-objectbrowser select.object-type').change();
			} else {
				window.error_notice('Error while loading object-types.');
			}
		});
    };

    /**
     * Callback function for selecting an object-type.
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    $('#i-doit-objectbrowser select.object-type').change(function() {
			window.display_loading();
        var data = {
            "method":"cmdb.objects",
            "params":{
                "session":{
                    "username":api_user,
                    "password":api_password,
                    "language":api_lang,
                    "mandator":api_mandator},
                "type":parseInt(this.value)},
            "id":"1",
            "jsonrpc":"2.0"};

        idoit_ajax(data, function(response) {
            if (response.error == null) {
						window.remove_loading();
                // Clear the table from our old entries.
                current_objectview_data = response.result;
                window.render_objectview();
            } else {
                window.error_notice('Error while loading objects by object-type');
            }
        });
    });

    /**
     * This event will store the added ID's from the object-view.
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    $('input[name="i-doit-objectbrowser-obj[]"]').live('change', function() {
        if ($(this).attr('checked')) {
            var name = $(this).closest('tr').find('td:eq(1)').text(),
                type = $('#i-doit-objectbrowser select.object-type option:selected').text();

            window.add_object($(this).val(), name, type);
        } else {
            window.remove_object($(this).val());
        }
    });

    /**
     * This event will store the added ID's from the tree-view.
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    $('input[name="i-doit-treebrowser-obj[]"]').live('change', function() {
        if ($(this).attr('checked')) {
            var name = $(this).next('span.obj-name').text(),
                type = $(this).next('span.obj-type').text();

            window.add_object($(this).val(), name, type);
        } else {
            window.remove_object($(this).val());
        }
    });

    /**
     * Function for loading the requestor - This can be used if a new requestor has been added to the "Requestor" field.
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    $('#requestor-reload').click(function() {
        window.load_requestor_data();
    });


	/**
	 * Function for reloading the requestors - This will be fired when a new requestor is beeing added to the "Requestor" field.
	 *
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
	$('#Requestors').live('change', function() {
		window.load_requestor_data();
	});


	/**
	 * Function for reloading the preselection - This will be fired when the preselection field is beeing changed.
	 *
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
	browser_preselection_field.live('change', function() {
		window.load_preselection_data();
	});

    /**
     * Loads and displays the requestor-data (workplace, assigned objects, ...).
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
	window.load_requestor_data = function() {
		requestors = $('#Requestors').val();

		if (typeof requestors == 'string') {
			requestors = requestors.replace(/(\s)/g, '').split(',');
		}

		if (typeof requestors != 'undefined') {
			if (requestors.length > 0) {
				window.display_loading();
				data = {
					"method":"cmdb.workstation_components",
					"params":{
						"session":{
							"username":api_user,
							"password":api_password,
							"language":api_lang,
							"mandator":api_mandator},
						"email":requestors},
					"id":"1",
					"jsonrpc":"2.0"};

				idoit_ajax(data, function(response) {
					// First we check for errors.
					window.remove_loading();
					
					if (response.error == null) {
						current_treeview_data = response.result;
						window.render_treeview();
					} else {
						window.error_notice('Error while loading objects by email.');
					}
				});
			}
		}
	};
		
	/**
	 * Loads and displays the preselection-data.
	 *
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
	window.load_preselection_data = function() {
		var preselection = browser_preselection_field.val();
		
		if (typeof preselection != 'undefined') {
			preselection = preselection.split("\n")
			
			if (preselection != '') {
				preselection = preselection.map(function(i) {
					return (!isNaN(parseInt(i)) ? parseInt(i) : 0);
				});
				
				if (preselection.length > 0) {
					window.display_loading();
					// We first request the preselected ID's so we can display them correctly inside the "selected objects" list (ID, Name, Type).
					data = {
						"method":"cmdb.objects_by_filter",
						"params":{
							"session":{
								"username":api_user,
								"password":api_password,
								"language":api_lang,
								"mandator":api_mandator},
							"filter":{
								"ids":preselection}},
						"id":"1",
						"jsonrpc":"2.0"};
					
					idoit_ajax(data, function(response) {
							window.remove_loading();
							if (response.error == null) {
								window.remove_all_objects();
							
								$.each(response.result, function(i, e) {
									window.add_object(e.id, e.title, e.objecttype);
								});
							} else {
								window.error_notice('Error while preselecting objects.');
							}
						});
				}
			}
        }
    };

	
	/**
	 * Event for initializing the object browser, when changing the mandator.
	 * 
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
	browser_mandator_field.live('change', function() {
		api_mandator = browser_mandator_field.val();
		window.init_browser();
	});
	
		
	/**
	 * This function is used to render the tree view. This is needed to update the selected ID's.
	 *
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
    window.render_treeview = function() {
        $('#tab-treeview div').html('');

        // We iterate through the email-addresses.
        $.each(current_treeview_data, function(i, e) {
            $('#tab-treeview div.workplaces').append('<b>' + i + '</b><br />');

            // We iterate through the workplaces.
            $.each(e, function(i, e) {
                var selected = false;
                if (typeof $('#data-store').data(e.data.id) != 'undefined') {
                    selected = true;
                }

                $('#tab-treeview div.workplaces').append('<div class="workplace"><input type="checkbox" value="' + e.data.id + '" ' + ((selected) ? 'checked="checked"' : '') + ' name="i-doit-treebrowser-obj[]" /><span class="obj-name">' + e.data.title + '</span> (<span class="obj-type">Arbeitsplatz</span>)<br />');

                if (e.childs) {
                    // Finally we iterate through the single assigned objects.
                    $.each(e.childs, function(i, e) {
                        var selected = false;
                        if (typeof $('#data-store').data(e.id) != 'undefined') {
                            selected = true;
                        }

                        $('#tab-treeview div.workplaces div.workplace:last').append('<input type="checkbox" value="' + e.id + '" ' + ((selected) ? 'checked="checked"' : '') + ' name="i-doit-treebrowser-obj[]" style="margin-left:20px;" /><span class="obj-name">' + e.title + '</span> (<span class="obj-type">' + e.objecttype + '</span>)<br />');
                    });
                }

                $('#tab-treeview div.workplaces').append('</div>');
            });
        });
    };

    /**
     * Function for rendering the object-table.
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    window.render_objectview = function() {
        objectview_table.fnClearTable();
        $.each(current_objectview_data, function(i, e) {
            if (e.status == 2) {
                var check = '', selected = false, title = '';

                if (typeof $('#data-store').data(e.id) != 'undefined') {
                    selected = true;
                }

                check = '<input type="checkbox" value="' + e.id + '" name="i-doit-objectbrowser-obj[]" ' + ((selected) ? 'checked="checked"' : '') + ' /> ' + e.id;
				title = '<a href="<% RT->Config->Get('IDoitURL') %>?objID=' + e.id + '">' + e.title + '</a>';
                objectview_table.fnAddData([check, title]);
            }
        });
    };

    /**
     * Function for removing an item from the selected data.
     *
     * @param   integer  id  The object-id to remove from our selection.
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    window.remove_object = function(id) {
        $('#data-store').removeData(id);

        window.render_selected_items();
			
		// Instead of rendering the lists new, we can to something like this:
		$('input[name="i-doit-objectbrowser-obj[]"][value="' + id + '"]').attr('checked', false);
		$('input[name="i-doit-treebrowser-obj[]"][value="' + id + '"]').attr('checked', false);
	};


	/**
	 * Function for removing all items from the selected data.
	 *
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
	window.remove_all_objects = function() {
		$('#data-store').removeData();
		
		window.render_selected_items();
        window.render_objectview();
        window.render_treeview();
    };

    /**
     * Function for removing an item from the selected data.
     *
     * @param   integer  id    The object-id.
     * @param   string   name  The object-title.
     * @param   integer  type  The object-type.
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    window.add_object = function(id, name, type) {
        $('#data-store').data(id, {"name": name, "type": type});

        window.render_selected_items();
			
			// Instead of rendering the tables new, we can to something like this:
			$('input[name="i-doit-objectbrowser-obj[]"][value="' + id + '"]').attr('checked', 'checked');
			$('input[name="i-doit-treebrowser-obj[]"][value="' + id + '"]').attr('checked', 'checked');
    };

    /**
     * Function for rendering the "selected objects" list. Will be used when adding or removing an object.
     *
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    window.render_selected_items = function() {
        var data_array = [];

        itemview_table.fnClearTable();
        $.each($('#data-store').data(), function(i, e) {	
			var title = '<a href="<% RT->Config->Get('IDoitURL') %>?objID=' + i + '">' + e.name + '</a>';
			
			itemview_table.fnAddData(['<a href="#i-doit-objectbrowser" class="i-doit-objectbrowser-remover" onclick="window.remove_object(' + i + ')">Entfernen</a>', i, title, e.type]);
            data_array.push(i);
        });

        browser_preselection_field.val(data_array.join("\n"));
    };

    /**
     * Function for sending requests to idoit.
     *
     * @param   json      data      A json-object with the data, you want to send with the request.
     * @param   function  callback  A callback to assign to the "success" of an request.
     * @author  Leonard Fischer <lfischer@synetics.de>
     */
    window.idoit_ajax = function(data, callback) {
        $.ajax({
            url: api_url,
            data: JSON.stringify(data),
            contentType: 'application/json',
            type: 'POST',
            dataType: 'json',
            success: callback
        });
    };

		
	/**
	 * You may implement an own method to display errors here.
	 *
	 * @param   string  msg  The error message.
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
    window.error_notice = function(msg) {
        alert(msg);
    }

		
	/**
	 * Function for displaying the "loading" screen.
	 *
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
	window.display_loading = function() {
		$('#loading-screen').stop().fadeTo(300, 1);
		$('#i-doit-objectbrowser-content').stop().fadeTo(300, 0.3);
	}
	
	
	/**
	 * Function for removing the "loading" screen.
	 *
	 * @author  Leonard Fischer <lfischer@synetics.de>
	 */
	window.remove_loading = function() {
		$('#loading-screen').stop().fadeTo(300, 0);
		$('#i-doit-objectbrowser-content').stop().fadeTo(300, 1);
	}

	// Hide the preselection field.
	browser_preselection_field.parent('tr').hide();

	// Initialize our data object.
	$('#data-store').data();

	// Initialize our tabs.
	$('#i-doit-objectbrowser-content').tabs({selected: api_default_view});

	// Start the browser.
	window.init_browser();
})(jQuery);
</script>

<%INIT>
use Switch;

$IDoitURL = RT->Config->Get('IDoitURL');
unless($IDoitURL) {
    my $msg = loc('URL for i-doit is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}

$IDoitAPI = RT->Config->Get('IDoitAPI');
unless($IDoitAPI) {
    my $msg = loc('URL for i-doit\'s API is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}

$IDoitLanguage = RT->Config->Get('IDoitLanguage');
unless($IDoitLanguage) {
    my $msg = loc('Language for i-doit\'s API is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}

$IDoitUser = RT->Config->Get('IDoitUser');
unless($IDoitUser) {
    my $msg = loc('User for i-doit\'s API is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}

$IDoitPassword = RT->Config->Get('IDoitPassword');
unless($IDoitPassword) {
    my $msg = loc('Password for i-doit\'s API is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}

my $cfMandator = 'i-doit mandator';
my $cf = RT::CustomField->new($RT::SystemUser);
$cf->LoadByNameAndQueue(Name => $cfMandator, Queue => '0');
unless($cf->id) {
    $$skip_create = 1;
    push @{$results}, loc('Custom field ' . $cfMandator . ' does not exist.');
    my $msg = loc('URL for i-doit\'s API is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}
$IDoitMandator = 'Object-RT::Ticket--CustomField-' . $cf->id . '-Values';

my $cfObjects = 'i-doit objects';
$cf = RT::CustomField->new($RT::SystemUser);
$cf->LoadByNameAndQueue(Name => $cfObjects, Queue => '0');
unless($cf->id) {
    $$skip_create = 1;
    push @{$results}, loc('Custom field ' . $cfObjects . ' does not exist.');
    my $msg = loc('URL for i-doit\'s API is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}
$IDoitObjects = 'Object-RT::Ticket--CustomField-' . $cf->id . '-Values';

$IDoitDefaultView = RT->Config->Get('IDoitDefaultView');
unless($IDoitDefaultView) {
    my $msg = loc('Default view for i-doit\'s API is not configured.');
    RT::Logger->error($msg);
    $$skip_create = 1;
    push @{$results}, $msg;
}
switch ($IDoitDefaultView) {
    case 'object' { $IDoitView = 0; }
    case 'tree' { $IDoitView = 1; }
    case 'item' { $IDoitView = 2; }
}
</%INIT>

<%ARGS>
$skip_create => undef
$results => undef

$IDoitURL => undef
$IDoitAPI => undef
$IDoitLanguage => undef
$IDoitUser => undef
$IDoitPassword => undef
$IDoitMandator => undef
$IDoitObjects => undef
$IDoitDefaultView => undef
$IDoitView => undef

# TODO Make field for email addresses configurable (current status: 'Requestors').
</%ARGS>
